\documentclass[serif]{beamer}
\usetheme{Boadilla}
\usepackage{graphicx}
\usepackage[final]{animate}
\usepackage{breqn}
\usepackage{xcolor}
\usepackage{booktabs}
\usepackage{tikz}
\usetikzlibrary{decorations.pathreplacing}
\usetikzlibrary{shapes,arrows,positioning,shadows}
\usepackage{subfig}
\usepackage{pgf}

% change format of enumerated lists
\setbeamertemplate{enumerate items}[default]

\setbeamertemplate{navigation symbols}{}

% tikz objects
\tikzstyle{decision} = [diamond, draw, text width=6em, text badly centered, inner sep=2pt, top color=white, bottom color=zissou3]
\tikzstyle{block} = [rectangle, draw, text width=10em, text centered, rounded corners, minimum height=3em, minimum width=8em, top color = white, bottom color=zissou3]
\tikzstyle{declare} = [rectangle, draw, text width=10em, text centered, minimum height=3em, minimum width=8em, top color = white, bottom color=zissou3]

% macros
\newcommand{\emtxt}[1]{\textbf{\textit{#1}}}

% knitr setup
<<setup, include = F, cache = F>>=
# set global chunk options
opts_chunk$set(fig.path='fig/', fig.align='center', fig.show='hold',message=F,echo=F,results='asis',dev='pdf',dev.args=list(family='serif'),fig.pos='!ht',warning=F)
options(replace.assign=T,width=90,digits=3)
@

% dependent data
<<dep_dat, include = F, cache = F>>=
source('R/funcs.R')
@

% custom colors
<<mypal, echo = F, results = 'asis', cache = T>>=
pal <- function(x) brewer.pal(x, 'BuGn')
num_col <- 5

for(i in 1:num_col){
 
  col.nm <- paste0('mypal',i)
  hexa <- paste0(gsub('#', '', pal(5)[i]))
  cat(paste0('\\definecolor{', col.nm,'}{HTML}{',hexa,'}'))
  
}

bg_col <- scales::alpha(pal(num_col)[3], 0.3)

pdf('fig/back_tmp.pdf',bg = bg_col)
frame()
invisible(dev.off())

@

% my custom ggplot theme
<<my_ggplot, echo = F, results = 'hide' , message = F>>=
theme_mine <- function (base_size = 12, base_family = "") {
  theme_bw(base_size = base_size, base_family = base_family) %+replace% 
  theme(
    plot.background = element_rect(fill='transparent', 
      colour = NA),
    panel.background = element_rect(fill='transparent', 
      colour = NA),
    legend.background = element_rect(fill='transparent', 
      colour = NA),
    strip.background = element_rect(fill = 
        alpha(pal(5)[5],0.5)),
    legend.key = element_rect(fill = 'transparent', 
      colour = NA)
    )   
}

# set as default
theme_set(theme_mine())
@

\setbeamercolor{title}{fg=mypal5} % main title
\setbeamercolor{frametitle}{fg=mypal4, bg=mypal2} % frame titles
\setbeamercolor{structure}{fg=mypal4} % bottom banner
\setbeamercolor{normal text}{fg=mypal5}
\usebackgroundtemplate{\includegraphics[height=\paperheight,width=\paperwidth]{fig/back_tmp.pdf}}

\begin{document}

\title[Evaluating water quality]{\textbf{A quantitative and reproducible approach to evaluate trends in seagrass indicators}}
\author[M. Beck]{Dr. Marcus W. Beck}

\institute[USEPA]{ORISE post-doc, USEPA National Health and Environmental Effects Research Laboratory, Gulf Ecology Division, \href{mailto:beck.marcus@epa.gov}{beck.marcus@epa.gov}, Phone: 8509342480}

\date{Dec. 15, 2014}

\titlegraphic{
\centerline{
\begin{tikzpicture}
  \node[drop shadow={shadow xshift=0ex, shadow yshift=0ex}, fill=white,draw] at (0,0) {\includegraphics[width=0.8\textwidth]{fig/title_pic.png}};
\end{tikzpicture}
}}

%%%%%%
\begin{frame}[shrink]
\titlepage
\end{frame}

\section{Background}

%%%%%%
\begin{frame}{\textbf{Managing coastal waters}}{\textbf{How do we use data?}}
The foundation of most management programs is a strong monitoring network \scriptsize \cite{NRC90}\\~\\
\normalsize
Monitoring provides information for decision-making based on apparent trends...
\vspace{0.2in}
\begin{center}
\emtxt{What are the changes in environmental condition over time?}\\~\\
\emtxt{Are these changes `good' or `bad' based on our management objectives?}\\~\\
\emtxt{What may have caused these changes?}
\end{center}
\end{frame}

%%%%%%
\begin{frame}{\textbf{Managing coastal waters}}{\textbf{How do we use data?}}
\emtxt{The good news}: We are getting better at monitoring - standardized, automated, increased coverage, real-time/continuous \\~\\
\emtxt{The bad news}: Our ability to use these data for decision-making has not kept pace with availability! \\~\\
<<theo, fig.height = 3.25, fig.width = 5, out.width = '0.55\\textwidth'>>=
par(mar = c(4, 4, 0.5, 0.5), family = 'serif')
x <- seq(1,100)
y1 <- x^2
y2 <- 4000 + 10*x
plot(x, y1, type = 'l', xlab = 'Time', ylab = 'Relative quantities', axes = F, col = pal(5)[4], lty = 2, lwd = 2)
lines(x, y2, col = pal(5)[4], lty = 1, lwd = 2)
axis(side = 1, c(1, 100), labels = F)
axis(side = 2, c(1, 100^2), labels = F)
legend('topleft', lty = c(2,1), lwd = c(2,2), legend= c('Data', 'Analysis tools'), col = c(pal(5)[4], pal(5)[4]), bty = 'n')
@
\end{frame}

%%%%%%
\begin{frame}{\textbf{Managing coastal waters}}{\textbf{How do we use data?}}
\onslide<+->
We have the data but... \\~\\
\emtxt{Challenge 1:} We may not know how to use the information for decision-making \\~\\
\emtxt{Challenge 2:} We often lack appropriate tools to unambiguously and quantitatively characterize trends \\~\\
\emtxt{Challenge 3:} We may not have indicators to assess progress towards management goals \\~\\
\onslide<+->
These challenges are not impossible... \scriptsize \cite{Kelling09} \\~\\
\normalsize
\emtxt{Solution:} The use of open-science tools can facilitate data integration, assessment, and communication!
\end{frame}

\section{Seagrass indicators}

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
\onslide<+->
Seagrasses have long been considered sentinels of water quality \scriptsize \cite{Short96}\\~\\
\normalsize
Numerous ecosystem services - healthy seagrass, healthy eastuary \\~\\
The following example illustrates the use of open-science tools to \emtxt{integrate}, \emtxt{assess}, and \emtxt{communicate} data for evaluating seagrass indicators \\~\\
\onslide<+->
Open-science is \emtxt{reproducible}, \emtxt{transparent}, and \emtxt{collaborative} \scriptsize \cite{Molloy09} \normalsize
\begin{columns}
\begin{column}{0.2\textwidth}
\centerline{\includegraphics[width = \textwidth]{fig/Rlogo.png}}
\end{column}
\begin{column}{0.2\textwidth}
\centerline{\includegraphics[width = \textwidth]{fig/RStudio.png}}
\end{column}
\begin{column}{0.2\textwidth}
\centerline{\includegraphics[width = \textwidth]{fig/knit-logo.png}}
\end{column}
\begin{column}{0.2\textwidth}
\centerline{\includegraphics[width = \textwidth]{fig/octocat.png}}
\end{column}
\end{columns}
\end{frame}

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
\onslide<+->
The maximum depth of colonization is a useful indicator of water clarity -- biologically-based and related to numerous response endpoints \\~\\
Often used as a basis for establishing nutrient criteria \\~\\
\onslide<+->
\emtxt{Problem 1:} No consensus on the best way to measure depth of colonization\\~\\
\emtxt{Problem 2:} Plenty of data are available but standardized and flexible techniques have not been developed
\end{frame}

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
\onslide<+->
\emtxt{Objective:} Develop a reproducible and empirical method for estimating depth of colonization, builds on ideas in \cite{HagyIR}
\begin{columns}[T]
\begin{column}{0.5\textwidth}
<</segmap, fig.height = 4, fig.width = 4, echo = F, results = 'hold', cache = T>>=
segs <- readShapeSpatial('data/segs.shp')
state <- readShapeSpatial('data/FL_state.shp')

par(mar = c(0, 0, 2, 0), family = 'serif')
sp::plot(state, col = pal(5)[3])
sp::plot(segs, col = pal(5)[2], add = T)
title('Segment-based approach', line = 0, cex.main = 1.4)
@
\end{column}
\begin{column}{0.45\textwidth}
\centerline{\includegraphics[width = 0.8\textwidth]{fig/Charlotte_Estuary_Segments.jpg}}
\end{column}
\end{columns}
\end{frame}

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
\onslide<+->
How can we estimate depth of colonization? \\~\\
\begin{columns}[T]
\onslide<+->
\begin{column}{0.32\textwidth}
Pick a segment\\~\\
\centerline{\includegraphics[width = 0.9\textwidth]{fig/map820.png}}
\end{column}
\onslide<+->
\begin{column}{0.32\textwidth}
Get seagrass coverage
<</segsg, fig.height = 4, fig.width = 4, echo = F, results = 'hold', cache = T>>=
seg <- readShapeSpatial('data/seg_820.shp')
state <- readShapeSpatial('data/FL_state.shp')
sgpoly <- readShapeSpatial('data/bbend_sg_diss.shp')

par(mar=c(0,0,0,0))
sp::plot(seg, border = 'white')
sp::plot(sgpoly, add = T, col = pal(5)[5], border = NA)
sp::plot(state, add = T, col = pal(5)[3])
sp::plot(seg, add = T)
@
\end{column}
\onslide<+->
\begin{column}{0.32\textwidth}
Get depth points\\~\\
<</segpt, fig.height = 4, fig.width = 4, echo = F, results = 'hold', cache = T>>=
sgrass <- readShapeSpatial('data/sgpts_820_2006.shp')
sgrass <- sgrass[sample(1:nrow(sgrass), 2000, replace = F),]

seg <- readShapeSpatial('data/seg_820.shp')
state <- readShapeSpatial('data/FL_state.shp')

par(mar=c(0,0,0,0))
sp::plot(seg)
sp::plot(state, add = T, col = pal(5)[3])
points(sgrass, col = alpha(pal(5)[5], 0.5), pch =16, cex = 0.6)
@
\end{column}
\end{columns}
\end{frame}

\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
\onslide<+->
How can we estimate depth of colonization? \\~\\
<<'/sg_est_ex', fig.height = 6, fig.width = 10, out.width = '0.9\\textwidth'>>=
load( 'data/sgpts820.RData')
dat <- doc_est(data.frame(sgpts820))

to_plo <- dat$data

# base plot if no estimate is available
p2 <- ggplot(to_plo, aes(x = Depth, y = sg_prp)) +
  geom_point(pch = 1, size = 4) +
  theme(text = element_text(size=20)) +
  ylab('Proportion of points with seagrass') +
  xlab('Depth (m)')

# get y value from est_fun for sg_max and doc_med
yends <- try({
  with(dat, est_fun(c(sg_max, doc_med)))
  })

to_plo2 <- dat$preds
to_plo3 <- dat$est_fun
to_plo4 <- data.frame(
  Depth = with(dat, c(sg_max, doc_med, doc_max)), 
  yvals = rep(0, 3)
)

# some formatting crap
x_lims <- max(1.1 * max(na.omit(to_plo4)$Depth), 1.1 * dat$doc)
pt_cols <- brewer.pal(nrow(to_plo4), 'Blues')
leg_lab <- paste0(
  c('SG max (', 'DOC med (', 'DOC max ('),
  round(to_plo4$Depth, 2), 
  rep(')', 3)
)

# the plot
p2 <- p2 +
  geom_line(data = to_plo2, 
    aes(x = Depth, y = sg_prp)
    ) +
  scale_y_continuous(limits = c(0, 1.1 * max(to_plo2$sg_prp))) + 
  scale_x_continuous(limits = c(min(to_plo$Depth), 1.1 * x_lims)) + 
  stat_function(fun = to_plo3, colour = 'lightgreen', size = 1.5, 
    alpha = 0.6) +
  geom_segment(x = dat$sg_max, y = 0, xend = dat$sg_max, 
    yend = yends[1], linetype = 'dashed', colour = 'lightgreen',
    size = 1.5, alpha = 0.6) +
  geom_segment(x = dat$doc_med, y = 0, xend = dat$doc_med, 
    yend = yends[2], linetype = 'dashed', colour = 'lightgreen',
    size = 1.5, alpha = 0.6) +
  geom_point(data = to_plo4, 
    aes(x = Depth, y = yvals, fill = factor(Depth)), 
    size = 6, pch = 21) +
  scale_fill_brewer('Depth estimate (m)', 
    labels = leg_lab,
    palette = 'Blues'
    ) +
  theme(legend.position = c(1, 1),
    legend.justification = c(1, 1))
p2

@
\end{frame}

<<sgdepthall, echo = F, eval = F>>=
# seagrass depth of col ests
load('data/sg_dat.RData')
sg_dat <- lapply(split(sg_dat, sg_dat$SEGID), function(x) x[nrow(x), ])
sg_dat <- do.call('rbind', sg_dat)

# combine depth of col with segment locations
segs <- readShapeSpatial('data/segs.shp')
centroids <- gCentroid(segs, byid = T)
segs$SEGID <- as.numeric(as.character(segs$SEGID))

segs <- merge(segs, sg_dat, by = 'SEGID')
segs <- data.frame(segs, data.frame(centroids))
segs <- na.omit(segs[, c('SEGID', 'ZcMax', 'x', 'y')])

# state
state <- readShapeSpatial('data/FL_state.shp')

# get points/size for plots
col.pts <- colorRampPalette(pal(5))(nrow(segs))[rank(segs$ZcMax)]
rsc.pts<-scales::rescale(segs$ZcMax,c(1,7))

leg.text<-round(quantile(segs$ZcMax,c(0,0.33,0.66,1)),1)
leg.cex<-seq(0.7,5,length=4)
leg.col<-colorRampPalette(pal(5))(4)

# plot
pdf('fig/sgdepthall.pdf', family = 'serif', height = 7, width = 7)
par(mar = c(0, 0, 0, 0), family = 'serif')

sp::plot(state, col = alpha(pal(5)[3], 0.5))
points(segs$x, segs$y, pch = 21, bg = col.pts, cex = rsc.pts)
legend(-87,28,legend=leg.text,pt.cex=leg.cex,col=alpha('black',0.75),title='Maximum seagrass depth (m)',pch=21,bty='n',cex=1.4,y.intersp=1.4,pt.bg=leg.col,x.intersp=1.3)
dev.off()
@

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
We can get an estimate of seagrass depth of colonization for each segment in Florida \scriptsize \cite{HagyIR}
\vspace{-0.25in}
\centerline{\includegraphics[width = 0.55\textwidth]{fig/sgdepthall.pdf}}
\end{frame}

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
\onslide<+->
This approach works if the segment is an appropriate spatial unit to characterize seagrass...
\begin{columns}[T]
\onslide<+->
\begin{column}{0.45\textwidth}
<</docfail1, fig.height = 4, fig.width = 4, echo = F, results = 'hold', cache = T>>=
seg <- readShapeSpatial('data/seg_820.shp')
state <- readShapeSpatial('data/FL_state.shp')
sgrass <- readShapeSpatial('data/sgpts_820_2006.shp')
sgrass <- sgrass[sample(1:nrow(sgrass), 2000, replace = F),]
above <- sgrass[sgrass$GRID_CODE >= -2.619, ]
below <- sgrass[sgrass$GRID_CODE < -2.619, ]

par(mar=c(0,0,0,0))
sp::plot(seg, border = 'white')
sp::plot(state, add = T, col = pal(5)[3])
sp::plot(seg, add = T)
points(above, col = alpha(pal(5)[5], 0.5), pch = 16, cex = 0.6)
points(below, col = alpha('black', 0.5), pch = 21, cex = 0.6)
legend('bottomleft', legend = c('Within max depth estimate', 'Beyond max depth estimate'), col = c(alpha(pal(5)[5], 0.5), alpha('black', 0.5)), pch = c(16, 21), border = white)
@
\end{column}
\onslide<+->
\begin{column}{0.45\textwidth}
<</docfail2, fig.height = 4, fig.width = 4, echo = F, results = 'hold', cache = T>>=
seg <- readShapeSpatial('data/seg_820.shp')
state <- readShapeSpatial('data/FL_state.shp')
sgpoly <- readShapeSpatial('data/bbend_sg_diss.shp')
sgrass <- readShapeSpatial('data/sgpts_820_2006.shp')
sgrass <- sgrass[sample(1:nrow(sgrass), 2000, replace = F),]
above <- sgrass[sgrass$GRID_CODE >= -2.619, ]
below <- sgrass[sgrass$GRID_CODE < -2.619, ]

par(mar=c(0,0,0,0))
sp::plot(seg, border = 'white')
sp::plot(state, add = T, col = pal(5)[3])
sp::plot(seg, add = T)
points(above, col = alpha(pal(5)[5], 0.5), pch = 16, cex = 0.6)
points(below, col = alpha('black', 0.5), pch = 21, cex = 0.6)
sp::plot(sgpoly, add = T, col = pal(5)[5], border = NA)
legend('bottomleft', legend = 'Actual seagrass growth', fill = alpha(pal(5)[5]), border = alpha(pal(5)[1]))
@
\end{column}
\end{columns}
\end{frame}

<<radani, eval = F, echo = F>>=
set.seed(12)
seg <- readShapeSpatial('data/seg_820.shp')
state <- readShapeSpatial('data/FL_state.shp')
sgpoly <- readShapeSpatial('data/bbend_sg_diss.shp')
sgrass <- readShapeSpatial('data/sgpts_820_2006.shp')
sgrass <- sgrass[sample(1:nrow(sgrass), 2000, replace = F),]
load('data/sgpts820.RData')

test_pt <- SpatialPoints(data.frame(lon = -83.45, lat = 29.64))

# radii to eval
rads <- rev(seq(0.05, 0.2, length = 40))

# get doc by radius estimates for plot
ests <- NULL
for(rad in rads){

  buff_pts <- buff_ext(sgpts820, test_pt, buff = rad)

  doc_in <- data.frame(buff_pts)
  doc <- doc_est(doc_in)
  ests <- c(ests, doc$doc_med)
  
}

pdf('fig/radred.pdf', height = 4.25, width = 9, family = 'serif')
for(rad in rads){

  cat(rad, '\t')
    
  par(mfrow = c(1, 2), mar = c(4.1, 4.1, 1, 4.1), family = 'serif')
    
  buff_pts <- buff_ext(sgrass, test_pt, buff = rad)  
    
  sp::plot(seg, border = 'white')
  sp::plot(state, add = T, col = pal(5)[3])
  sp::plot(seg, add = T)
  points(buff_pts, pch = 16, col = alpha(pal(5)[5], 0.5), cex = 0.6)
  points(test_pt, pch = 16, col = 'black', cex = 2)
  legend('bottomleft', legend = c('Pt of interest', 'Depth pts in buffer'), pch = c(16, 16), col = c('black', alpha(pal(5)[5], 0.5)), pt.cex = c(2, 1))
  mtext(paste0("Radius from pt: ", round(rad, 2), " (dec. deg.)"), cex = 1.45, side = 1, line = 3)
    
  x <- rads
  y <- ests
  
  ind <- which(rad == rads)
  if(1 + ind > length(y)) y <- ests
  else y[(1 + ind):length(y)] <- NA
  plot(x, y, type = 'l', xlab = 'Radius from pt (dec. deg.)', ylab = 'Colonization estimate (m)', ylim = c(1, 3), xlim = rev(range(x)), 
    bty = 'n', cex.lab = 1.45)

}
dev.off()
    
@
%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
If segment is not appropriate, can we define a spatial boundary for estimating seagrass depth of colonization?
\begin{center}
\animategraphics[controls,width=0.95\linewidth]{12}{fig/radred}{}{} %frame rate is 12 per/sec
\end{center}
\end{frame}

<<radani2, eval = F, echo = F>>=
# set.seed(12)
# seg <- readShapeSpatial('data/seg_820.shp')
# state <- readShapeSpatial('data/FL_state.shp')
# load('data/sgpts820.RData')
# 
# est_pts <- grid_est(seg, spacing = 0.025)
# 
# # radii to eval
# rads <- rev(seq(0.05, 0.15, length = 40))
# 
# rad_ests <- vector('list', length = length(rads))
# names(rad_ests) <- rads
# for(rad in rads){
#   cat(rad, '\t')
#   ests <- NULL
#   for(est_pt in 1:nrow(data.frame(est_pts))){
#   # get doc by radius estimates for plot
#   
#     buff_pts <- buff_ext(sgpts820, est_pts[est_pt, ], buff = rad)
#   
#     doc_in <- data.frame(buff_pts)
#     doc <- doc_est(doc_in)
#     ests <- c(ests, doc$doc_med)
#     ests <- c(ests, doc$ests)
#     
#   }
# 
# rad_ests[[as.character(rad)]] <- ests
# 
# }
# save(rad_ests, file = 'data/rad_ests.RData')

set.seed(12)
load('data/rad_ests.RData')
seg <- readShapeSpatial('data/seg_820.shp')
state <- readShapeSpatial('data/FL_state.shp')
est_pts <- grid_est(seg, spacing = 0.025)

# get colors for plotting
col_ests <- do.call('c', rad_ests)
col_ests <- colorRampPalette(pal(5)[c(3, 4, 5)])(length(col_ests))[rank(col_ests)]
col_ests <- split(col_ests, rep(rads, each = length(est_pts)))

# get sizes for plotting
rsc_ests <- do.call('c', rad_ests)
rsc_ests <- scales::rescale(rsc_ests, c(1, 5))
rsc_ests <- split(rsc_ests, rep(rads, each = length(est_pts)))

# legend stuff
leg.text<-round(quantile(do.call('c', rad_ests), c(0,0.33,0.66,1), na.rm = T),1)
leg.cex<-seq(1,5,length=4)
leg.col<-colorRampPalette(pal(5)[c(3, 4, 5)])(4)

# radii to eval
rads <- rev(seq(0.05, 0.15, length = 40))
cex_rads <- seq(100, 15, length = 40)

pdf('fig/radred2.pdf', height = 4.25, width = 9, family = 'serif')
for(rad in 1:length(rads)){
  
  cat(rad, '\t')
  par(mfrow = c(1, 2), mar = c(1, 1, 1, 1), family = 'serif')
    
  sp::plot(seg, border = 'white')
  sp::plot(state, add = T, col = pal(5)[3])
  sp::plot(seg, add = T)
  sp::plot(est_pts, add = T, pch = 16, col = 'black')
  sp::plot(est_pts, add = T, pch = 1, col = 'black', cex = cex_rads[rad])
  legend('bottomleft', pch = c(16, 1), pt.cex = c(1, 4), legend = c('Pt for estimate', 'Area around pt'), cex = 1.1, bty = 'n', bg = 'white', y.intersp=1.6)
  
  col_est <- col_ests[names(col_ests) %in% rads[rad]][[1]]
  rsc_est <- rsc_ests[names(rsc_ests) %in% rads[rad]][[1]]
  
  sp::plot(seg, border = 'white')
  sp::plot(state, add = T, col = pal(5)[3])
  sp::plot(seg, add = T)
  sp::plot(est_pts, add = T, pch = 16, col =col_est, cex = rsc_est)
  legend('bottomleft', legend=leg.text,pt.cex=leg.cex,col=leg.col,title='Maximum seagrass\ndepth (m)',pch=16,bty='n',cex=1.1,y.intersp=1.6,pt.bg=leg.col,x.intersp=1.3)
  
}
dev.off()
    
@
%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
This can be repeated for a number of points until we get estimates that make sense
\begin{center}
\animategraphics[controls,width=0.95\linewidth]{12}{fig/radred2}{}{} %frame rate is 12 per/sec
\end{center}
\end{frame}

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
Benefits of the approach \\~\\
\begin{itemize}
\item The spatial unit for any estimate of seagrass growth limit is problem-specific \\~\\
\item Allows for a `compliance-point' approach (saves time/money) \\~\\
\item Increased understanding of seagrass growth patterns - natural and anthropogenic drivers \\~\\
\item Results are \emtxt{communicable}...
\end{itemize}
\end{frame}

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
\centerline{\href{https://beckmw.shinyapps.io/sg_depth/}{https://beckmw.shinyapps.io/sg\_depth/}}
\centerline{\includegraphics[width = 0.85\textwidth]{fig/widget_ex.png}}
\end{frame}

\section{Chesapeake Bay example}

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
More importantly, the approach is \emtxt{reproducible}! \\~\\
\begin{columns}
\begin{column}{0.3\textwidth}
Boundaries
\centerline{\includegraphics[width = \textwidth]{fig/cb_seg.pdf}}
\end{column}
\begin{column}{0.3\textwidth}
Depth
\centerline{\includegraphics[width = \textwidth]{fig/cb_dem.png}}
\end{column}
\begin{column}{0.3\textwidth}
Seagrass
\centerline{\includegraphics[width = \textwidth]{fig/cb_sea.pdf}}
\end{column}
\end{columns}
\end{frame}

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
\centerline{\href{https://beckmw.shinyapps.io/cb_seagrass/}{https://beckmw.shinyapps.io/cb\_seagrass/}}
\centerline{\includegraphics[width = 0.85\textwidth]{fig/widget_cb.png}}
\end{frame}

%%%%%%
\begin{frame}{\textbf{Seagrasses and water quality}}{\textbf{Making the most of data}}
These are powerful tools...
<<cb_all, fig.height = 6, fig.width = 11, out.width = '\\textwidth', fig.align = 'center', message = F, cache = T>>=
# load data
bounds <- readShapeSpatial('data/cb_poly.shp')
segs <- readShapeSpatial('data/sg_segs.shp')
sgbuff <- readShapeSpatial('data/grid_polys.shp')
# load('dat/sgpts.RData')

# # get estimates for whole bay
# grid_spc <- 0.01
# radius <- 0.1
# grid_seed <- 1234
# set.seed(grid_seed)
# 
# pts <- grid_est(sgbuff, spacing = grid_spc) 
# tmp <- doc_est_grd(pts, sgpts, trace = T)
# sg_ests <- tmp
# save(sg_ests, file = 'dat/sg_ests.RData')

load(file = 'data/sg_ests.RData')
sg_ests <- data.frame(sg_ests)
filt_val <- quantile(sg_ests$doc_max, 0.9)
sg_ests <- sg_ests[sg_ests$doc_max <= filt_val, ]

p1 <- ggplot(bounds, aes(long, lat)) + 
  geom_polygon(fill = 'grey', aes(group = piece)) +
  theme_classic() +
  coord_equal() +
  xlab('Longitude') +
  ylab('Latitude') +
  geom_point(
    data = data.frame(sg_ests),
    aes(x = Var1, y = Var2, colour = doc_max, size = doc_max), 
  ) +
  scale_colour_gradientn(colours = brewer.pal(9, 'BuGn')) +
  scale_size_continuous(range = c(1, 10)) +
  theme(
    text = element_text(size=20), 
    legend.position = c(0, 1),
    legend.justification = c(0, 1), 
    plot.background = element_rect(fill='transparent', 
      colour = NA),
    panel.background = element_rect(fill='transparent', 
      colour = NA),
    legend.background = element_rect(fill='transparent', 
      colour = NA),
    strip.background = element_rect(fill = 
        alpha(pal(5)[5],0.5)),
    legend.key = element_rect(fill = 'transparent', 
      colour = NA)
    ) +
  labs(colour = 'Depth (m)', size = 'Depth (m)') + 
  guides(colour = guide_legend(), size = guide_legend())

load(file = 'data/sg_ests.RData')
filt_val <- quantile(sg_ests$doc_max, 0.9)
sg_ests <- sg_ests[sg_ests$doc_max <= filt_val, ]

segs <- readShapeSpatial('data/sg_segs.shp')
tmp <- over(segs, sg_ests, fn = function(x) mean(x, na.rm = T))
sg_ests <- na.omit(data.frame(CBPSEG = segs@data$CBPSEG, tmp))
sg_ests <- aggregate(. ~ CBPSEG, sg_ests, function(x) mean(x, na.rm = T))
sg_ests <- sp::merge(segs, sg_ests, by = 'CBPSEG', all.x = T)

segs_plo <- fortify(sg_ests)
segs_plo <- na.omit(cbind(segs_plo, sg_ests@data[segs_plo$id, ]))

p2 <- ggplot(bounds, aes(long, lat, group = piece)) + 
  geom_polygon(fill = 'grey') +
  geom_polygon(data = segs_plo, aes(long, lat, fill = doc_max, group = group)) +
  theme_classic() +
  coord_equal() +
  xlab('Longitude') +
  ylab('Latitude') +
  scale_fill_gradientn(colours = brewer.pal(9, 'BuGn')) +
  theme(
    text = element_text(size=20), 
    legend.position = c(0, 1),
    legend.justification = c(0, 1),
    plot.background = element_rect(fill='transparent', 
      colour = NA),
    panel.background = element_rect(fill='transparent', 
      colour = NA),
    legend.background = element_rect(fill='transparent', 
      colour = NA),
    strip.background = element_rect(fill = 
        alpha(pal(5)[5],0.5)),
    legend.key = element_rect(fill = 'transparent', 
      colour = NA)
    ) +
  labs(fill = 'Depth (m)') 

grid.arrange(p1, p2, ncol = 2)

@
\end{frame}

\section{Conclusions}

%%%%%%
\begin{frame}{\textbf{Conclusions}}
Indicator development for goal assessment is problem-specific - tools will need to capitalize on available data to address questions of need \\~\\
The seagrass example illustrates that \emtxt{reproducible}, \emtxt{transparent}, and \emtxt{collaborative} methods can be developed \\~\\
Results can also guide future decisions - management actions or additional data needs \\~\\
Complexity is a challenge that can be mitigated through \emtxt{open-science}
\begin{columns}
\begin{column}{0.2\textwidth}
\centerline{\includegraphics[width = \textwidth]{fig/Rlogo.png}}
\end{column}
\begin{column}{0.2\textwidth}
\centerline{\includegraphics[width = \textwidth]{fig/RStudio.png}}
\end{column}
\begin{column}{0.2\textwidth}
\centerline{\includegraphics[width = \textwidth]{fig/knit-logo.png}}
\end{column}
\begin{column}{0.2\textwidth}
\centerline{\includegraphics[width = \textwidth]{fig/octocat.png}}
\end{column}
\end{columns}
\end{frame}

%%%%%%
\section{References}
\begin{frame}[t, shrink]{\textbf{References}}
\footnotesize
\setbeamertemplate{bibliography item}{}
\bibliographystyle{apalike_mine}
\bibliography{ref_diss}
\end{frame}

\end{document}